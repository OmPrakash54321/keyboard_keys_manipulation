#!/bin/bash

# Base KMonad config template
CONFIG_TEMPLATE="
(defcfg
  input (device-file \"DEVICE_PATH\")
  output (uinput-sink \"KMonad Output DEVICE_NAME\")
  fallthrough true
)

(defsrc caps i j k l )

(defalias cap (tap-hold-next 200 caps (layer-toggle arrows)) )

(deflayer base @cap i j k l )

(deflayer arrows _ up left down rght )
"

# Temporary directory for config files
TMP_DIR="/tmp/kmonad_configs"
mkdir -p "$TMP_DIR"

# Function to start KMonad for a device
start_kmonad() {
    local DEVICE="$1"
    local COUNTER="$2"
    local CONFIG_FILE="$TMP_DIR/kmonad_$COUNTER.kbd"
    local DEVICE_NAME="kbd_$COUNTER"

    # Generate config
    echo "$CONFIG_TEMPLATE" | sed "s|DEVICE_PATH|$DEVICE|g" | sed "s|DEVICE_NAME|$DEVICE_NAME|g" > "$CONFIG_FILE"

    # Launch KMonad with sudo
    /usr/bin/sudo /usr/local/bin/kmonad "$CONFIG_FILE" &
    echo "Started KMonad for $DEVICE (PID: $!)"
}

# Function to stop all KMonad instances
stop_kmonad() {
    /usr/bin/sudo pkill -f "/usr/local/bin/kmonad /tmp/kmonad_configs/kmonad_.*.kbd" 2>/dev/null
    rm -f "$TMP_DIR"/kmonad_*.kbd
    echo "Stopped all KMonad instances"
}

# Initial cleanup
stop_kmonad

# Initial start for existing keyboards
KEYBOARDS=$(ls /dev/input/by-path/*-kbd 2>/dev/null)
if [ -n "$KEYBOARDS" ]; then
    COUNTER=0
    for DEVICE in $KEYBOARDS; do
        start_kmonad "$DEVICE" "$COUNTER"
        ((COUNTER++))
    done
else
    echo "No keyboards found initially"
fi

# Monitor /dev/input/by-path/ for changes
inotifywait -m -e create -e delete --format '%e %f' /dev/input/by-path/ | while read EVENT FILE; do
    if [[ "$FILE" == *-kbd ]]; then
        if [[ "$EVENT" == CREATE* ]]; then
            # Start KMonad for new keyboard
            start_kmonad "/dev/input/by-path/$FILE" "$COUNTER"
            ((COUNTER++))
        elif [[ "$EVENT" == DELETE* ]]; then
            # Stop KMonad for removed keyboard
            # Implement logic to stop KMonad for this device
            stop_kmonad_for_device "/dev/input/by-path/$FILE"
        fi
    fi
done
